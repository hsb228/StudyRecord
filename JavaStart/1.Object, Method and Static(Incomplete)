/*<Object>

-Java의 중심으로, new 명령어로 기존의 변수나 클래스를 객체화시킨다.
참조)p.104,201

<Method>

-모든 클래스는 반드시 1개 이상의 메소드가 있어야만 한다.
-모든 클래스는 웬만하면 메인 메소드를 제일 먼저 쓴다. (나중에 안 쓸 수도 있음)
-메소드 이름은 소문자 시작하는 것이 바람직하고, 합성문에서 첫 글자로 대문자로 하
는 것이 권장된다.
-메소드는 반드시 호출을 해야만 하며 스스로 동작하지 않는다. (메인 메소드 제외)
-메인 이외의 메소드를 호출 할 때는 호출부로 호출하며,호출한 메소드는 끝나면 맨 밑으로 가는 게 아니라 다시 호출부 쪽으로 돌아온다.
ex)void calledMethod()
-return은 반환해야 하는 값에 맞는 유형의 변수로 돌려줘야 한다.

*기본적인 메소드 사용법
(접근제한자)(return type) (메소드) {
변수 선언
return 변수;
}  
*/
====================================
public int calledMeth(); {
int sum = 0;
sum= 100+200;
return sum;
}
====================================
예제1-1) - 메인클래스에서 객체화 후 실행만 하는 경우





예제1-2) - 메인클래스에서 값을 받아서 실행만 하는 경우.





*메소드 간의 정보교환

-보내는 메소드의 값(파라미터)을 받는 메소드는 반드시 그의 값에 맞는 변수 타입으로 받아야한다.
즉,보내는 메소드는 값만, 받는 메소드는 그 값에 맞는 변수 타입이 있어야한다. 
-클래스나 메소드 내의 변수의 이름은 상관이 없다.(클래스->클래스,메소드 전부 해당)
-이 방식으로는 반대쪽의 값을 받는 건 불가능하다.
-한번에 여러개를 보낼 수도 있으며, 보내는 것이 너무 많으면 묶어서 레퍼런스 타입으로 보낸다.
-return으로 반환할 수 있는 값은 0개(void)에서 1개뿐이다.
*/
예제1) -

/*



/*
<접근제한자>

-접근제한자는 생략이 가능하다.
-import는 두 메소드가 같은 패키지에 있을 경우에는 필요가 없지만, 그렇지 않을 경우에는 반드시 필요로 한다.

-private: 클래스 내
-protected: 같은 패키지(접근 제한자 생략시 이 것으로 적용)
-public: 전 프로젝트 

참고)p.367*/
====================================
예제1) - 






====================================
/*<Static>

-Static을 선언한 변수와 메소드는 주기억에 저장되고 프로젝트 전체에 적용되며, 프로젝트가 종료 될 때까지 바뀌지 않는다.
-Static이 붙으면 객체화 없이 바로 변수와 직접 사용이 가능하다. 그러나 남용 시 주기억 장치에 지나치게 많은 메모리를 차지하게 된다.

<보너스>
-숫자를 문자로 바꿀 때

1.<숫자> + ""
2.String <변수 이름> = Integer.toString(숫자)

p.246) - 메소드 오버로딩

-클래스 안의 멤버 공간이 this공간인 이유는 this로 멤버 공간의 변수를 로컬 공간의 변수와 구분 할수 있기 때문이다.
(참고로 멤버 공간은 변수 초기화가 필요하지 않지만, 초기화 시 초기화 된 값으로 변한다.)*/
